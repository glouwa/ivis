/// <reference path="helper/references.ts" />

namespace Plexx {

    export class InitNodeVisitor implements Plexx.NodeVisitorInterface {
        private renderContext: RenderContext;

        constructor(renderContext: RenderContext) {
            this.renderContext = renderContext;
        }

        public visitLeafNode(leafNode: Plexx.LeafNode) {
        }

        public visitCompositeNode(compositeNode: Plexx.CompositeNode) {
            compositeNode.getChildren().forEach(childNode => {
                childNode.accept(this);
            });
        }

        public visitGroupNode(groupNode: Plexx.Group) {
            let thisInitNodeVisitor: InitNodeVisitor = this;
            groupNode.getChildren().forEach(childNode => {
                childNode.accept(thisInitNodeVisitor);
            });
        }

        public visitTransformationNode(transformationNode: Plexx.TransformationNode) {
            transformationNode.getChildren().forEach(childNode => {
                childNode.accept(this);
            });
        }

        public visitDrawingAreaNode = (drawingArea: Plexx.DrawingArea) => {
            let thisInitNodeVisitor: InitNodeVisitor = this;
            drawingArea.getChildren().forEach(childNode => {
                childNode.accept(thisInitNodeVisitor);
            });
        };

        public visitPrimitiveNode(primitiveNode: Plexx.PrimitiveNodeinterface) {
            primitiveNode.initWebGlShader(this.renderContext);
            primitiveNode.initWebGlBuffers(this.renderContext);
        }
    }

}
