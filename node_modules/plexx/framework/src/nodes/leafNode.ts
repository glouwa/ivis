/// <reference path="../helper/references.ts" />

namespace Plexx {
    export abstract class LeafNode extends SceneGraphNode {

        public updateCanvas2d(renderContext: Plexx.RenderContext, currentTransformationMatrix: Plexx.Mathlib.Mat3): boolean {
            return false;
        }

        public updateSvg(renderContext: Plexx.RenderContext, currentTransformationMatrix: Plexx.Mathlib.Mat3): boolean {
            let svgObject = this.generateXmlTag(renderContext, currentTransformationMatrix).generateSvgElement();
            renderContext.getSVG().appendChild(svgObject);
            return true;
        }

        public updateWebGl(renderContext: Plexx.RenderContext, currentTransformationMatrix: Plexx.Mathlib.Mat3): boolean {
            return false;
        }

        public toSVGString(renderContext: RenderContext, preTransformationMatrix: Plexx.Mathlib.Mat3): string {
            let svgString: string = "";
            svgString = this.generateXmlTag(renderContext, preTransformationMatrix).getEmptyElementTag() + "\n";
            return svgString;
        }

        public generateXmlTag(renderContext: Plexx.RenderContext, preTransformationMatrix: Plexx.Mathlib.Mat3): Plexx.XMLTag {
            return null;
        }

        protected vertexShaderSource: string =
            "attribute Vec2 aVertexPosition;                                                                       \n" +
            "                                                                                                      \n" +
            "uniform int matrix_size;                                                                              \n" +
            "uniform Mat3 matrix;                                                                                  \n" +
            "uniform Vec2 resolution;                                                                              \n" +
            "                                                                                                      \n" +
            "void main() {                                                                                         \n" +
            "  Vec2 pos = (matrix * Vec3(aVertexPosition, 1)).xy;                                                  \n" +
            "  Vec2 tmp1 = pos / (resolution);                                                                     \n" +
            "  Vec2 tmp2 = tmp1 * 2.0;                                                                             \n" +
            "  Vec2 tmp3 = tmp2 - 1.0;                                                                             \n" +
            "  gl_Position = vec4(tmp3 , 0, 1);                                                                    \n" +
            "}                                                                                                     \n";

        protected fragmentShaderSource: string =
            "precision mediump float;                                                                              \n" +
            "                                                                                                      \n" +
            "uniform vec4 colour;                                                                                  \n" +
            "                                                                                                      \n" +
            "void main() {                                                                                         \n" +
            "  gl_FragColor = colour;                                                                              \n" +
            "}                                                                                                     \n";
    }
}
