/// <reference path="../../helper/references.ts" />

namespace Plexx {

    export interface ScaleNodeInterface {
        scale?: number[];
        scalePoint?: number[];
    }

    export class ScaleNode extends TransformationNode {
        scale: number[];
        scalePoint: number[];

        constructor(values: ScaleNodeInterface) {
            super("ScaleNode");
            this.scale = values.scale || [1, 1];
            this.scalePoint = values.scalePoint || [0, 0];
        }

        public clone(): ScaleNode {
            return new ScaleNode({
                scale: this.scale,
                scalePoint: this.scalePoint
            });
        }

        public toString(): string {
            let scaleString = this.getName() + " { ";
            scaleString += "scale: " + this.scale + "; ";
            scaleString += "scalePoint: " + this.scalePoint + "; ";
            scaleString += "}";
            return scaleString;
        }

        public getTransformationMatrix(): Plexx.Mathlib.Mat3 {
            let r: Plexx.Mathlib.Mat3 = new Plexx.Mathlib.Mat3([1, 0, 0, 0, 1, 0, -this.scalePoint[0], -this.scalePoint[1], 1]);
            let k: Plexx.Mathlib.Mat3 = new Plexx.Mathlib.Mat3([this.scale[0], 0, 0, 0, this.scale[1], 0, 0, 0, 1]);
            let rv: Plexx.Mathlib.Mat3 = new Plexx.Mathlib.Mat3([1, 0, 0, 0, 1, 0, this.scalePoint[0], this.scalePoint[1], 1]);
            //            console.log("MatrixK " + k.all().toString());
            let p: Plexx.Mathlib.Mat3 = r.copy().multiply(k);
            let an: Plexx.Mathlib.Mat3 = p.copy().multiply(rv);
            return an;
        }

        public getInverseTransformationMatrix(): Plexx.Mathlib.Mat3 {
            let r: Plexx.Mathlib.Mat3 = new Plexx.Mathlib.Mat3([1, 0, 0, 0, 1, 0, -this.scalePoint[0], -this.scalePoint[1], 1]);
            let k: Plexx.Mathlib.Mat3 = new Plexx.Mathlib.Mat3([1 / this.scale[0], 0, 0, 0, 1 / this.scale[1], 0, 0, 0, 1]);
            let rv: Plexx.Mathlib.Mat3 = new Plexx.Mathlib.Mat3([1, 0, 0, 0, 1, 0, this.scalePoint[0], this.scalePoint[1], 1]);
            let p: Plexx.Mathlib.Mat3 = r.copy().multiply(k);
            let an: Plexx.Mathlib.Mat3 = p.copy().multiply(rv);
            return an;
        }
    }
}
