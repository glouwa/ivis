/// <reference path="./references.ts" />

namespace Plexx {

    export class DebugHelper {

        private debugPanelElement: any;
        private debugPanelElementList: any;
        private renderInfo: any;
        private debugpanelId: string;
        private renderContext: RenderContext;
        private rootNode: Plexx.DrawingArea;

        private panelSVGExportCSS: string = "<style>" +
            "nav {" +
            "    background-color: #1C1C1C;" +
            "    list-style-type: none;" +
            "    padding-top: 1px;" +
            "    padding-bottom: 1px;" +
            "    height: 1.4em;" +
            "    width: auto;" +
            "}" +
            ".fdgl-debugpanel ul, fdgl-debugpanel li {" +
            "    padding: 0;" +
            "}" +
            ".fdgl-debugpanel ul {" +
            "    background: #556070;" +
            "    list-style: none;" +
            "    width: 100%;" +
            "    height: auto;" +
            "    margin: 0;" +
            "}" +
            ".fdgl-debugpanel li {" +
            "    float: left;" +
            "    position: relative;" +
            "    text-align: center;" +
            "    width: auto;" +
            "    margin: 0 .2em 0 .1em;" +
            "}" +
            ".fdgl-debugpanel a {" +
            "    background: #556070;" +
            "    color: #FFFFFF;" +
            "    display: block;" +
            "    font: 12px 'Lucida Grande', LucidaGrande, Lucida, Helvetica, Arial, sans-serif;" +
            "    padding: 0.1em 5px;" +
            "    text-align: center;" +
            "    float: left;" +
            "    width: 50px;" +
            "    text-decoration: none;" +
            "    cursor: pointer;" +
            "    -webkit-user-select: none;" +
            "    -moz-user-select: none;" +
            "    -ms-user-select: none;" +
            "}" +
            "li#fdgl-debugpanel-left {" +
            "    float: left;" +
            "}" +
            "li#fdgl-debugpanel-center {" +
            "    color: #FFFFFF;" +
            "    display: block;" +
            "    font: 12px 'Lucida Grande', LucidaGrande, Lucida, Helvetica, Arial, sans-serif;" +
            "    padding: 2px 25px;" +
            "    text-align: center;" +
            "    text-decoration: none;" +
            "}" +
            "li#fdgl-debugpanel-right{" +
            "    float: right;" +
            "}" +
            "li#fdgl-debugpanel-right a{" +
            "    width: 100px;" +
            "}" +
            ".opt li {" +
            "    float: left;" +
            "    position: relative;" +
            "    width: auto;" +
            "    padding: 10px;" +
            "}" +
            "</style>";

        constructor(debugpanelId: string, renderContext: RenderContext, rootNode: Plexx.DrawingArea) {
            this.debugpanelId = debugpanelId;
            this.renderContext = renderContext;
            this.rootNode = rootNode;

            this.debugPanelElement = document.getElementById(this.debugpanelId);
            this.debugPanelElement.setAttribute("id", this.debugpanelId);
            this.debugPanelElement.setAttribute("class", "fdgl-debugpanel");
            this.debugPanelElement.style.width = document.getElementById(renderContext.getId()).style.width;

            this.debugPanelElement.innerHTML += this.panelSVGExportCSS;

            let fdglElement: any = document.getElementsByClassName("plexx")[0];
            let parentFdglElement = fdglElement.parentNode;
            parentFdglElement.insertBefore(this.debugPanelElement, fdglElement.nextSibling);
            this.renderInfo = document.createElement("li");
            this.renderInfo.setAttribute("id", "resolutionInfo");

            let currentTime = new Date();
            this.renderInfo.innerHTML = rootNode.getWidth() + "x" + rootNode.getHeight();
            this.debugPanelElement.appendChild(this.renderInfo);

            this.debugPanelElementList = document.createElement("ul");
            this.debugPanelElement.appendChild(this.debugPanelElementList);

            this.initDebugPanelLeftElement();
            this.initDebugPanelCenterElement();
            this.initDebugPanelRightElement();
        }

        public initDebugPanelLeftElement(): void {
            let optionCanvas = document.createElement("a");
            let optionSVG = document.createElement("a");
            let optionWebGL = <HTMLAnchorElement> document.createElement("a");

            optionCanvas.type = "submit";
            optionCanvas.innerHTML = "Canvas";
            optionCanvas.id = "rendertypeCanvas";
            optionCanvas.style.color = "white";
            optionCanvas.style.backgroundColor = "blue";
            optionCanvas.onclick = (e) => {
                this.renderContext.changeRenderType(RenderType.CANVAS2D);
                this.rootNode.run(this.renderContext);
                this.updateInfo(this.renderContext, this.rootNode);
                optionCanvas.style.color = "white";
                optionCanvas.style.backgroundColor = "blue";
                optionSVG.style.color = "blue";
                optionSVG.style.backgroundColor = "white";
                if (this.renderContext.isWebGLEnabled()) {
                    optionWebGL.style.color = "blue";
                    optionWebGL.style.backgroundColor = "white";
                }
            };

            optionSVG.type = "submit";
            optionSVG.innerHTML = "SVG";
            optionSVG.id = "rendertypeSVG";
            optionSVG.style.color = "blue";
            optionSVG.style.backgroundColor = "white";
            optionSVG.onclick = (e) => {
                this.renderContext.changeRenderType(RenderType.SVG);
                this.rootNode.run(this.renderContext);
                this.updateInfo(this.renderContext, this.rootNode);
                optionCanvas.style.color = "blue";
                optionCanvas.style.backgroundColor = "white";
                optionSVG.style.color = "white";
                optionSVG.style.backgroundColor = "blue";
                if (this.renderContext.isWebGLEnabled()) {
                    optionWebGL.style.color = "blue";
                    optionWebGL.style.backgroundColor = "white";
                }
            };

            optionWebGL.type = "submit";
            optionWebGL.innerHTML = "WebGL";
            optionWebGL.id = "rendertypeWebGL";
            optionWebGL.style.color = "black";
            optionWebGL.style.backgroundColor = "grey";
            if (this.renderContext.isWebGLEnabled()) {
                optionWebGL.style.color = "blue";
                optionWebGL.style.backgroundColor = "white";
                optionWebGL.onclick = (e) => {
                    this.renderContext.changeRenderType(RenderType.WEBGL);
                    this.rootNode.run(this.renderContext);
                    optionCanvas.style.color = "blue";
                    optionCanvas.style.backgroundColor = "white";
                    optionSVG.style.color = "blue";
                    optionSVG.style.backgroundColor = "white";
                    optionWebGL.style.color = "white";
                    optionWebGL.style.backgroundColor = "blue";
                };
            }

            if (!this.renderContext.isWebGLEnabled()) {
//                optionWebGL.disabled = true;
            }

            let leftOptionsUl = document.createElement("ul");
            let optionCanvasLi = document.createElement("li");
            let optionSVGLi = document.createElement("li");
            let optionWebGLLi = document.createElement("li");
            let optionsLi = document.createElement("li");
            optionSVGLi.setAttribute("class", "opt");
            optionWebGLLi.setAttribute("class", "opt");
            optionCanvasLi.setAttribute("class", "opt");
            optionsLi.id = "left";
            optionCanvasLi.appendChild(optionCanvas);
            optionSVGLi.appendChild(optionSVG);
            optionWebGLLi.appendChild(optionWebGL);
            leftOptionsUl.appendChild(optionCanvasLi);
            leftOptionsUl.appendChild(optionSVGLi);
            leftOptionsUl.appendChild(optionWebGLLi);
            optionsLi.appendChild(leftOptionsUl);
            this.debugPanelElementList.appendChild(optionsLi);
        }

        public initDebugPanelCenterElement(): void {
            let centerOptionsUl = document.createElement("ul");
            let infoLi = document.createElement("li");
            infoLi.id = "fdgl-debugpanel-center";

            this.debugPanelElement.appendChild(this.renderInfo);
            this.debugPanelElementList.appendChild(infoLi);
            infoLi.appendChild(this.renderInfo);

            let optionLines = document.createElement("a");

            optionLines.type = "submit";
            optionLines.innerHTML = "Lines";
            optionLines.style.color = "white";
            optionLines.style.backgroundColor = "grey";
            optionLines.onclick = (e) => {
                // if (!this.rootNode.areLinesVisible) {
                //     this.rootNode.areLinesVisible = true;
                //     optionLines.style.color = "white"
                //     optionLines.style.backgroundColor = "green"
                // }
                // else {
                //     this.rootNode.areLinesVisible = false;
                //     optionLines.style.color = "white"
                //     optionLines.style.backgroundColor = "grey"
                // }
                // this.renderContext.changeRenderType(this.renderContext.getRenderType());
                // this.rootNode.renderFrame(this.renderContext);
                // this.updateInfo(this.renderContext, this.rootNode);
            };
        }

        public initDebugPanelRightElement(): void {
            let exportSVG = document.createElement("a");
            exportSVG.type = "submit";
            exportSVG.innerHTML = "export SVG";
            exportSVG.onclick = (e) => {
                let s = new XMLSerializer();
                let str = this.rootNode.accept(new Plexx.SvgNodeVisitor(this.renderContext));
                let date = new Date();
                let timestamp = "plexx-snapshot-" +
                    date.getFullYear() + "-" +
                    date.getMonth() + "-" +
                    date.getDay() + "-" +
                    date.getHours() + "-" +
                    date.getMinutes() + "-" +
                    date.getSeconds();
                let filename = this.renderContext.getId() + "." + timestamp + ".svg";

                let downloadableElement = document.createElement("a");
                downloadableElement.setAttribute("href", "data:text/plain;charset=utf-8," + encodeURIComponent(str));
                downloadableElement.setAttribute("download", filename);

                let event = document.createEvent("MouseEvents");
                event.initEvent("click", true, true);
                downloadableElement.dispatchEvent(event);
            };

            let debugPanelRightElement = document.createElement("li");
            debugPanelRightElement.id = "fdgl-debugpanel-right";
            this.debugPanelElementList.appendChild(debugPanelRightElement);
            debugPanelRightElement.appendChild(exportSVG);
            this.debugPanelElement.appendChild(this.debugPanelElementList);
        }


        updateInfo(renderContext: RenderContext, rootNode: Plexx.DrawingArea) {
            this.renderInfo.innerHTML = rootNode.getWidth() + "x" + rootNode.getHeight();
        }

    }
}
