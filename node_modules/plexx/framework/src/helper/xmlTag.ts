/// <reference path="./references.ts" />

namespace Plexx {
    export class XMLTag {

        private name: string;
        private attributeList: string[][] = [];
        private content: string;

        public constructor(name: string) {
            this.name = name;
            this.content = "";
        }

        public addAttribute(attributeName: string, attributeValue: string) {
            let newValueIndex = this.attributeList.length;
            this.attributeList[newValueIndex] = [attributeName, attributeValue];
        }

        public setContent(content: string) {
            this.content = content;
        }

        public getStartTag(): string {
            let xmlString: string = "";
            xmlString += "<" + this.name;
            for (let attributeIndex = 0; attributeIndex < this.attributeList.length; attributeIndex++) {
                xmlString += " " + this.attributeList[attributeIndex][0] + "=\"" + this.attributeList[attributeIndex][1] + "\"";
            }
            xmlString += ">";
            return xmlString;
        }

        public getEndTag(): string {
            let xmlString: string;
            xmlString = "</" + this.name + ">";
            return xmlString;
        }

        public getEmptyElementTag(): string {
            let xmlString: string = "";
            xmlString += "<" + this.name + "";
            for (let attributeIndex = 0; attributeIndex < this.attributeList.length; attributeIndex++) {
                xmlString += " " + this.attributeList[attributeIndex][0] + "=\"" + this.attributeList[attributeIndex][1] + "\"";
            }
            xmlString += "/>";
            return xmlString;
        }

        public generateSvgText(): string {
            let svgText = "";

            if (this.content === "") {
                svgText += this.getEmptyElementTag();
            }
            else {
                svgText += this.getStartTag();
                svgText += this.content;
                svgText += this.getEndTag();
            }

            return svgText;
        }

        public generateSvgElement(): any {
            let svgElement = document.createElementNS(Constants.SVG_NAMESPACE, this.name);

            for (let attributeIndex = 0; attributeIndex < this.attributeList.length; attributeIndex++) {
                svgElement.setAttribute(this.attributeList[attributeIndex][0], this.attributeList[attributeIndex][1]);
            }

            if (this.content !== "") {
                let textElement = document.createTextNode(this.content);
                svgElement.appendChild(textElement);
            }

            return svgElement;
        }
    }
}
